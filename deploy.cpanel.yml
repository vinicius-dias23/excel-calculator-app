---
deployment:
  tasks:
    # Navegar para o diret√≥rio da aplica√ß√£o
    - export DEPLOYPATH="/home/$USER/public_html/excel-calculator"
    
    # Criar diret√≥rio de deploy se n√£o existir
    - mkdir -p "$DEPLOYPATH"
    
    # Limpar deploy anterior (manter backups se necess√°rio)
    - rm -rf "$DEPLOYPATH/app" "$DEPLOYPATH/package.json" "$DEPLOYPATH/.next"
    
    # Navegar para o diret√≥rio do projeto Next.js
    - cd "$REPO/app"
    
    # Instalar depend√™ncias usando yarn
    - /usr/bin/yarn install --frozen-lockfile --production=false
    
    # Fazer build da aplica√ß√£o Next.js
    - /usr/bin/yarn build
    
    # Copiar arquivos necess√°rios para o deploy
    - cp -r .next "$DEPLOYPATH/"
    - cp -r public "$DEPLOYPATH/" || true
    - cp package.json "$DEPLOYPATH/"
    - cp yarn.lock "$DEPLOYPATH/" || true
    - cp next.config.js "$DEPLOYPATH/"
    
    # Copiar arquivos da aplica√ß√£o (sem node_modules)
    - rsync -av --exclude=node_modules --exclude=.git --exclude=.next "$REPO/app/" "$DEPLOYPATH/app/"
    
    # Instalar apenas depend√™ncias de produ√ß√£o no destino
    - cd "$DEPLOYPATH" && /usr/bin/yarn install --frozen-lockfile --production=true
    
    # Configurar permiss√µes
    - chmod -R 755 "$DEPLOYPATH"
    
    # Criar arquivo de configura√ß√£o Node.js para cPanel (se suportado)
    - |
      echo "#!/usr/bin/env node
      const { createServer } = require('http');
      const { parse } = require('url');
      const next = require('next');

      const dev = process.env.NODE_ENV !== 'production';
      const hostname = process.env.HOST || 'localhost';
      const port = process.env.PORT || 3000;

      const app = next({ dev, hostname, port, dir: __dirname });
      const handle = app.getRequestHandler();

      app.prepare().then(() => {
        createServer(async (req, res) => {
          try {
            const parsedUrl = parse(req.url, true);
            await handle(req, res, parsedUrl);
          } catch (err) {
            console.error('Error occurred handling', req.url, err);
            res.statusCode = 500;
            res.end('internal server error');
          }
        }).listen(port, () => {
          console.log(\`> Ready on http://\${hostname}:\${port}\`);
        });
      });
      " > "$DEPLOYPATH/app.js"
    
    # Criar package.json simplificado para o servidor
    - |
      echo '{
        "name": "excel-calculator-app",
        "version": "1.0.0",
        "private": true,
        "scripts": {
          "start": "node app.js"
        },
        "dependencies": ' > "$DEPLOYPATH/package.json"
      cat "$REPO/app/package.json" | awk '/"dependencies"/ {flag=1; print "{"; next} flag {print} /}/ {flag=0; print "}"; exit}' >> "$DEPLOYPATH/package.json"
      echo '}' >> "$DEPLOYPATH/package.json"
    
    # Instalar depend√™ncias finais
    - cd "$DEPLOYPATH" && /usr/bin/yarn install --production=true
    
    # Criar arquivo .htaccess para redirecionamento (caso n√£o suporte Node.js)
    - |
      echo 'RewriteEngine On
      RewriteCond %{REQUEST_FILENAME} !-f
      RewriteCond %{REQUEST_FILENAME} !-d
      RewriteRule ^(.*)$ /excel-calculator/index.html [QSA,L]' > "$DEPLOYPATH/.htaccess"
    
    # Log de sucesso
    - echo "‚úÖ Deploy conclu√≠do em $DEPLOYPATH"
    - echo "üìÅ Arquivos copiados:"
    - ls -la "$DEPLOYPATH"
    - echo "üöÄ Aplica√ß√£o Next.js Excel Calculator pronta!"
    - echo ""
    - echo "üìã Instru√ß√µes p√≥s-deploy:"
    - echo "1. Se seu cPanel suporta Node.js: Configure Node.js App apontando para $DEPLOYPATH/app.js"
    - echo "2. Se n√£o suporta Node.js: Fa√ßa export est√°tico modificando next.config.js"
    - echo "3. Acesse: https://seudominio.com/excel-calculator"